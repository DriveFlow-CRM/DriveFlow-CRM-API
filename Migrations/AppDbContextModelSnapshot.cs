// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveFlow_CRM_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressNr")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AutoSchool", b =>
                {
                    b.Property<int>("AutoSchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("AutoSchoolId");

                    b.HasIndex("AddressId");

                    b.ToTable("AutoSchools");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AutoSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AutoSchoolId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.ApplicationUserTeachingCategory", b =>
                {
                    b.Property<int>("UserTeachingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TeachingCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserTeachingCategoryId");

                    b.HasIndex("TeachingCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserTeachingCategories");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time(6)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("CityId");

                    b.HasIndex("CountyId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.County", b =>
                {
                    b.Property<int>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CountyId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CriminalRecordExpirDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("MedicalRecordExpirDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScholarshipStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TeachingCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeachingCategoryId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.InstructorAvailability", b =>
                {
                    b.Property<int>("InstructorAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time(6)");

                    b.HasKey("InstructorAvailabilityId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("InstructorAvailabilities");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ScholarshipPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SessionsPayed")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("DrivingCategory")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RequestId");

                    b.HasIndex("AutoSchoolId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.TeachingCategory", b =>
                {
                    b.Property<int>("TeachingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ScholarshipPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SessionCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SessionDuration")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TeachingCategoryId");

                    b.HasIndex("AutoSchoolId");

                    b.ToTable("TeachingCategories");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GearboxType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ITP_ExpirDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InsuranceExpirDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RCA_ExpirDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrationNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TeachingCategoryId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("AutoSchoolId");

                    b.HasIndex("TeachingCategoryId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AutoSchool", b =>
                {
                    b.HasOne("Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.ApplicationUser", b =>
                {
                    b.HasOne("AutoSchool", "AutoSchool")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AutoSchoolId");

                    b.Navigation("AutoSchool");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.ApplicationUserTeachingCategory", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.TeachingCategory", "TeachingCategory")
                        .WithMany("ApplicationUserTeachingCategories")
                        .HasForeignKey("TeachingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", "User")
                        .WithMany("ApplicationUserTeachingCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeachingCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Appointment", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.File", "File")
                        .WithMany("Appointments")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.City", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.County", "County")
                        .WithMany("Cities")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.File", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", "Instructor")
                        .WithMany("InstructorFiles")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", "Student")
                        .WithMany("StudentFiles")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.TeachingCategory", "TeachingCategory")
                        .WithMany("Files")
                        .HasForeignKey("TeachingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.Vehicle", "Vehicle")
                        .WithMany("Files")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Payment");

                    b.Navigation("Student");

                    b.Navigation("TeachingCategory");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.InstructorAvailability", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("InstructorAvailabilities")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Request", b =>
                {
                    b.HasOne("AutoSchool", "AutoSchool")
                        .WithMany("Requests")
                        .HasForeignKey("AutoSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoSchool");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.TeachingCategory", b =>
                {
                    b.HasOne("AutoSchool", "AutoSchool")
                        .WithMany("TeachingCategories")
                        .HasForeignKey("AutoSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoSchool");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Vehicle", b =>
                {
                    b.HasOne("AutoSchool", "AutoSchool")
                        .WithMany("Vehicles")
                        .HasForeignKey("AutoSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.TeachingCategory", "TeachingCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("TeachingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoSchool");

                    b.Navigation("TeachingCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DriveFlow_CRM_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoSchool", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Requests");

                    b.Navigation("TeachingCategories");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserTeachingCategories");

                    b.Navigation("InstructorAvailabilities");

                    b.Navigation("InstructorFiles");

                    b.Navigation("StudentFiles");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.County", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.File", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.TeachingCategory", b =>
                {
                    b.Navigation("ApplicationUserTeachingCategories");

                    b.Navigation("Files");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DriveFlow_CRM_API.Models.Vehicle", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
